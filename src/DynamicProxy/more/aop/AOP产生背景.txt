
有些功能分布在各个对象继承体系中，任何业务对象都可能需要它们；另一方面，它们又与具体的业务逻辑几乎没有关系。
也就是说，它们纯粹是基础设施功能。例如：

1，日志
如果需要记录所有方法的调用时间、传入参数、返回值，就必须编写大量的重复编码。

2，安全性检查
如果需要给业务方法加上基于角色的访问控制，就必须逐个方法修改。

3，事务管理
如果需要访问事务性资源(关系数据库)，必须在每个操作之前开启事务、操作之后提交或回滚事务。

如果采用经典的面向对象手段来解决这类基础设施问题，业务对象需要实现特定的接口或继承特定的基类。
另外，由于基础设施服务都是通过接口提供，所以“可以提供哪些基础服务”实际上是预先规定好的，不能按需定制。
也就是说，如果突然需要统计每个业务方法执行的时间，由于没有预定义相应的接口，所以无法提供这样的基础设施功能。

对于这种横切多个对象继承体系的基础设施问题，可以通过AOP（Aspect-Oriented Programming）的手段来解决。

动态代理的技术、AOP的思想、再加上支持依赖注入的容器，这个黄金三角提供了最优秀最流行的JavaEE基础架构。